% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/initialize_inp.R
\name{inp_from_perp}
\alias{inp_from_perp}
\title{Input Probability Initialization By Bisection Search on Perplexity}
\usage{
inp_from_perp(perplexity = 30, input_weight_fn = exp_weight,
  keep_all_results = TRUE, verbose = TRUE)
}
\arguments{
\item{perplexity}{Target perplexity value for the probability distributions.}

\item{input_weight_fn}{Weighting function for distances. It should have the
signature \code{input_weight_fn(d2m, beta)}, where \code{d2m} is a matrix
of squared distances and \code{beta} is a real-valued scalar parameter
which will be varied as part of the search to produce the desired
\code{perplexity}. The function should return a matrix of weights
corresponding to the transformed squared distances passed in as arguments.}

\item{keep_all_results}{If \code{true} then the list returned by the callback
will also contain a vector of \code{beta} parameters that generated the
probability matrix. Otherwise, only the probability matrix is returned.}

\item{verbose}{If \code{TRUE} display messages about progress of
initialization.}
}
\value{
Input initializer for use by an embedding function.
}
\description{
An initialization method for creating input probabilities.
}
\details{
Function to generate a row probability matrix by optimizing a one-parameter
weighting function. This is used to create input probabilities from the
input distances, such that each row of the matrix is a probability
distribution with the specified perplexity.

This is the method described in the original SNE paper, and few methods
deviate very strongly from it, although they may do further processing
on the resulting probability matrix. For example, SSNE and t-SNE convert
this matrix into a single joint probability distribution.
}
\section{Exported data}{

Data generated by this initializer can be exported from the embedding
function by passing \code{"inp"} to the embedding function's
\code{export} list parameter. The return value of the embedding function is a
list, which will contain a member called \code{"inp"}. In turn, this is a list
containing the input data. If this initializer is used, the list will contain
the following data:
\describe{
 \item{\code{pm}}{Input probabilities.}
 \item{\code{beta}}{Input weighting parameters that produced the
    probabilities. Only provided if \code{keep_all_results} is \code{TRUE}.}
}
}
\examples{
# Set target perplexity of each probability distribution to 30
inp_from_perp(perplexity = 30)

# Set target perplexity of each probability distribution to 30 but use
# a different weighting function.
inp_from_perp(perplexity = 30, input_weight_fn = sqrt_exp_weight)

# Perplexity of 50, and keep the values of the exponential parameter for
# later processing or reporting.
inp_from_perp(perplexity = 50, keep_all_results = TRUE)

\dontrun{
# Should be passed to the init_inp argument of an embedding function
# To access input data, use the export parameter to export the "inp"
# input data.
embed_prob(init_inp = inp_from_perp(perplexity = 30,
 input_weight_fn = exp_weight), export = c("inp"))
}
}
\seealso{
\code{\link{embed_prob}} and \code{\link{embed_dist}} for more
  information on exporting initializer data.

Other sneer input initializers: \code{\link{inp_from_dint_max}},
  \code{\link{inp_from_perps_multi}},
  \code{\link{inp_from_step_perp}},
  \code{\link{input_initializers}}
}

