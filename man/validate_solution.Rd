% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optim.R
\name{validate_solution}
\alias{validate_solution}
\title{Optimizer Solution Validation}
\usage{
validate_solution(opt, inp, out, proposed_out, method, iter)
}
\arguments{
\item{opt}{Optimizer.}

\item{inp}{Input data.}

\item{out}{Output data from the start of the iteration.}

\item{proposed_out}{Proposed updated output for this iteration.}

\item{method}{Embedding method.}

\item{iter}{Iteration number.}
}
\value{
A list containing:
\item{\code{opt}}{Optimizer.}
\item{\code{inp}}{Input data.}
\item{\code{out}}{Output data from the start of the iteration.}
\item{\code{proposed_out}}{Proposed updated output for this iteration.}
\item{\code{method}}{Embedding method.}
\item{\code{ok}}{Logical value, \code{TRUE} if \code{proposed_out} passed
validation, \code{FALSE} otherwise}
}
\description{
Validation function of an optimization iteration.
}
\details{
The direction, step size or update part of the optimization step can "veto"
a particular solution if it's not to their liking. For example, the bold
driver step size method will flag an update as not ok if the cost increases.
If the solution does not validate, then it will not be applied to the
solution and the next iteration step takes place from the same position as
the current iteration.

When invoked, this function will call the validation functions provided by
the different components of the optimizer. If any of them return \code{FALSE}
this function will also return \code{FALSE} (i.e. all parts of the optimizer
must agree that the proposed solution is a good one). The optimizer will
reject a solution which fails this validation function and start the next
iteration with the same solution as it started the current iteration with.
To avoid the optimizer getting permanently stuck, any part of the optimizer
that can fail the validation should also update its internal state so that
a different update will be attempted on the next iteration.
}

