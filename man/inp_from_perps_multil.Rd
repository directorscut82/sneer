% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/multiscale.R
\name{inp_from_perps_multil}
\alias{inp_from_perps_multil}
\title{Initialize With Multiscale Perplexity (Lower Memory Usage)}
\usage{
inp_from_perps_multil(perplexities = NULL, input_weight_fn = exp_weight,
  num_scale_iters = NULL, modify_kernel_fn = scale_prec_to_perp,
  verbose = TRUE)
}
\arguments{
\item{perplexities}{List of perplexities to use. If not provided, then
a series of perplexities in decreasing powers of two are used, starting
with the power of two closest to the number of observations in the dataset
divided by four.}

\item{input_weight_fn}{Weighting function for distances. It should have the
signature \code{input_weight_fn(d2m, beta)}, where \code{d2m} is a matrix
of squared distances and \code{beta} is a real-valued scalar parameter
which will be varied as part of the search to produce the desired
perplexity. The function should return a matrix of weights
corresponding to the transformed squared distances passed in as arguments.}

\item{num_scale_iters}{Number of iterations for the perplexity of the input
probability to change from the start perplexity to the end perplexity.}

\item{modify_kernel_fn}{Function to create a new similarity kernel based
on the new perplexity. Will be called every time a new input probability
matrix is generated. See the details section for more.}

\item{verbose}{If \code{TRUE} print message about initialization during the
embedding.}
}
\value{
Input initializer for use by an embedding function.
}
\description{
An initialization method for creating input probabilities.
}
\details{
This function calculates multiple input probability matrices, corresponding
to multiple perplexities, then uses the average of these matrices for the
final probability matrix. It uses the same basic method of
\code{\link{inp_from_perps_multi}}, but saves a bit of memory by not having
to store all the probability matrices in memory at once.

The requirement to store all the matrices in memory comes from needing
to have calculated intrinsic dimensionalities at all scales to find the
maximum value, which is used as the best estimate in calculating the degree
to which the output precisions are modified to reflect any deviation from
uniform density.

If this wasn't necessary, it would only be necessary to store two matrices
at any time: the running total of probability sums and the current
probability matrix.

The downside to this is that the estimate of the intrinsic dimensionality
at a given iteration is only the largest value seen over the number of
scales used in the average probability matrix so far, so that the output
kernels for larger perplexities are slightly different compared to the
full-memory version.

The other difference between this version and the full-memory version is that
because the perplexity/precision results for the next higher perplexity
are not stored, they can't be used in the finite difference estimate of
the dimensionality. Instead, values used in the initial bisection search
to find the perplexity are used. This doesn't lead to very large differences
in the intrinisic dimensionalities in various test cases (< 2%).

A list of perplexities may be provided to this function. Otherwise, the
perplexities used are decreasing powers of 2, e.g. 16, 8, 4, 2
with the maximum perplexity given by the formula:

\deqn{\lfloor{\log_{2}(N/4)}\rceil}{round(log2(N / 4)}

where N is the number of observations in the data set. The smallest
perplexity value tried is 2.

If a non-zero value of \code{num_scale_iters} is provided, the perplexities
will be combined over the specified number of iterations, averaging over
an increasing number of perplexities until they are all used to generate
the probability matrix at \code{num_scale_iters}. If using the default
scales, the perplexities are added in decreasing order, otherwise, they
are added in the order provided in \code{scales} list. It is suggested that
the \code{scales} list therefore order the perplexities in decreasing order.
}
\seealso{
\code{\link{inp_from_perps_multi}} for more details on how the intrinsic
dimensionality is calculated.
\code{\link{embed_prob}} for how to use this function for
configuring an embedding.
}

